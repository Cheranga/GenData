@{
    ViewBag.Title = "Home";
}
<h2>@ViewBag.Title.</h2>
<h3>@ViewBag.Message</h3>


<button type="button" class="btn btn-primary" data-bind="click:submitData">
    <span class="glyphicon glyphicon-upload"></span>
    Submit
</button>
<p></p>
<div class="col-sm-6" data-bind="template: { name: 'formElementNodeTemplate', data: $data }"></div>
<div class="col-sm-6 xml" id="divResults">
    <pre lang="xml" class="hide" id="txtResults"></pre>
</div>

@section Scripts
{
    <script id="formElementNodeTemplate" type="text/html">
        <form>
            <ul>
                <li>
                    <div style="margin-top: 5px;">
                        <div>
                            <a data-bind="visible:$data.isCollection,click:$data.addNew" title="Add New" class="btn btn-xs btn-warning">
                                <span class="glyphicon glyphicon-plus"></span>Add New
                            </a>
                            <a data-bind="visible:$data.canDelete,click:$parent.removeNode" title="Delete" class="btn btn-xs btn-danger">
                                <span class="glyphicon glyphicon-remove"></span>    
                            Delete</a>
                            <span data-bind="text:$data.name" class="text-capitalize"></span>

                            <input type="text" class="form-control" data-bind="visible:$data.isEditable,value:$data.value" />
                            <!-- ko template: { name: 'formElementNodeTemplate', foreach:$data.properties } -->
                            <!-- /ko -->
                        </div>

                    </div>

                </li>
            </ul>
        </form>
    </script>


    <script type="text/javascript">

        var TreeNodeViewModel = function (data) {
            var self = this;

            self.name = ko.observable('');
            self.typeName = ko.observable('');
            self.isClass = ko.observable(false);
            self.isGeneric = ko.observable(false);
            self.isCollection = ko.observable(false);
            self.canDelete = ko.observable(false);
            self.value = ko.observable('');
            self.properties = ko.observableArray([]);
        }


        $(function () {
            $.ajax({
                url: '@Url.Action("GetMetaInfoForType")',
                method: 'GET',
                dataType: 'json',
                data: { type: 'GenData.Web.Models.Customer, GenData.Web, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' }
            }).done(function (data) {

                var getTreeNode = function (nodeData) {
                    //
                    // Note: In here maybe we can use the mapping plugin to create the view model in one shot.
                    //
                    var self = new TreeNodeViewModel();
                    self.name(nodeData.name);
                    self.typeName(nodeData.typeName);
                    self.isClass(nodeData.isClass);
                    self.isGeneric(nodeData.isGeneric);
                    self.isCollection(nodeData.isCollection);
                    self.canDelete(nodeData.canDelete);
                    self.value(nodeData.value);
                    self.properties([]);
                    self.dummy = nodeData.dummy;

                    if (nodeData.properties) {
                        ko.utils.arrayForEach(nodeData.properties, function (x) {
                            self.properties.push(getTreeNode(x));
                        });
                    }

                    self.isEditable = ko.computed(function () {
                        return !(self.isClass() || self.isCollection());
                    });

                    self.addNew = function () {
                        if (self.isCollection() === true) {
                            var dummyNode = getTreeNode(self.dummy);
                            self.properties.push(dummyNode);
                        }
                    };

                    self.removeNode = function (nodeItem) {
                        if (self.isCollection() === true) {
                            self.properties.remove(nodeItem);
                        }
                    };

                    return self;

                }

                var node = getTreeNode(data);

                node.submitData = function () {
                    $.ajax({
                        url: '@Url.Action("CreateObjectRepresentation")',
                        method: 'POST',
                        dataType: 'text',
                        data: { typeMetaInfo: ko.mapping.toJSON(node) }
                    }).done(function (response) {
                        $('#txtResults').removeClass('hide');
                        $('#txtResults').text(response);
                    }).fail(function () {

                    });
                };

                ko.applyBindings(node);

            }).fail(function () {
                alert('Failed!');
            });
        });

    </script>
}


